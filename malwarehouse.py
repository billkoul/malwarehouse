# -*- coding: utf-8 -*-
from __future__ import print_function
from colors import Colors
import sys
import subprocess
import time

def load_intro():
    print ("\n\n")
    print (Colors.TITLE + '''

 ███▄ ▄███▓ ▄▄▄       ██▓     █     █░ ▄▄▄       ██▀███  ▓█████  ██░ ██  ▒█████   █    ██   ██████ ▓█████ 
▓██▒▀█▀ ██▒▒████▄    ▓██▒    ▓█░ █ ░█░▒████▄    ▓██ ▒ ██▒▓█   ▀ ▓██░ ██▒▒██▒  ██▒ ██  ▓██▒▒██    ▒ ▓█   ▀ 
▓██    ▓██░▒██  ▀█▄  ▒██░    ▒█░ █ ░█ ▒██  ▀█▄  ▓██ ░▄█ ▒▒███   ▒██▀▀██░▒██░  ██▒▓██  ▒██░░ ▓██▄   ▒███   
▒██    ▒██ ░██▄▄▄▄██ ▒██░    ░█░ █ ░█ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓█  ▄ ░▓█ ░██ ▒██   ██░▓▓█  ░██░  ▒   ██▒▒▓█  ▄ 
▒██▒   ░██▒ ▓█   ▓██▒░██████▒░░██▒██▓  ▓█   ▓██▒░██▓ ▒██▒░▒████▒░▓█▒░██▓░ ████▓▒░▒▒█████▓ ▒██████▒▒░▒████▒
░ ▒░   ░  ░ ▒▒   ▓▒█░░ ▒░▓  ░░ ▓░▒ ▒   ▒▒   ▓▒█░░ ▒▓ ░▒▓░░░ ▒░ ░ ▒ ░░▒░▒░ ▒░▒░▒░ ░▒▓▒ ▒ ▒ ▒ ▒▓▒ ▒ ░░░ ▒░ ░
░  ░      ░  ▒   ▒▒ ░░ ░ ▒  ░  ▒ ░ ░    ▒   ▒▒ ░  ░▒ ░ ▒░ ░ ░  ░ ▒ ░▒░ ░  ░ ▒ ▒░ ░░▒░ ░ ░ ░ ░▒  ░ ░ ░ ░  ░
░      ░     ░   ▒     ░ ░     ░   ░    ░   ▒     ░░   ░    ░    ░  ░░ ░░ ░ ░ ▒   ░░░ ░ ░ ░  ░  ░     ░     v1.01
       ░         ░  ░    ░  ░    ░          ░  ░   ░        ░  ░ ░  ░  ░    ░ ░     ░           ░     ░  ░
                                                                                                          
    ''' + Colors.ENDC)
    print ("\n")
    print (Colors.WARNING + "MalWarehouse" + Colors.ENDC)
    print ("\n")

class Menu():
    def __init__(self):
        self.choices = {
            "0": self.quit,
            "1": self.instructions,
            "2": self.call_adb,
            "3": self.call_cpuinfo,
            "4": self.call_meminfo,
            "5": self.call_netstats,
            "6": self.call_batterystats,
            "7": self.call_procstats,
            "8": self.full_scan
        }

    def display_menu(self):
        print ("***************************************")
        print ("                Menu                   ")
        print ("***************************************")
        print ("0. Quit")
        print ("1. Instructions")
        print ("2. Scan device")
        print ("3. Dump cpu info")
        print ("4. Dump memory info")
        print ("5. Dump netstats details")
        print ("6. Dump battery stats")
        print ("7. Dump process stats")
        print ("8. Run full device scan")
        print ("***************************************")

    def run(self):
        while True:
            self.display_menu()
            choice = raw_input("Enter an option: ")
            action = self.choices.get(choice)
            if action:
                action()
            else:
                print (Colors.WARNING + "Not a valid option." + Colors.ENDC)

    def quit(self):
        print ("\n")
        print (Colors.WARNING + "Gracefully quiting..." + Colors.ENDC)
        sys.exit(0)

    def instructions(self):
        print ("---------------------------------------")
        print (Colors.WARNING + '''Instructions''' + Colors.ENDC + '''
------------
MalWarehouse scans your device to get important information such as:
CPU Usage
RAM Usage
Battery Usage
Running Processes
''')
        print ("---------------------------------------")

    def call_adb(self):
        print ("---------------------------------------")
        print (Colors.WARNING + "Calling ADB" + Colors.ENDC)
        print ("------------")
        args = ["platform-tools/adb", 'devices']
        subprocess.call(args) 
        print ("---------------------------------------")

    def call_cpuinfo(self):
    	f = open("export/cpuinfo-" + time.strftime("%Y-%m-%d %H.%M") + ".mwh", "w")
        print ("---------------------------------------")
        print (Colors.WARNING + "Calling ADB" + Colors.ENDC)
        print ("------------")
        print ("CPU information exported to cpuinfo-" + time.strftime("%Y-%m-%d %H.%M") +".mwh!")
        subprocess.call(["platform-tools/adb", "shell", "dumpsys", "cpuinfo"], stdout=f) 
        print ("---------------------------------------")

    def call_meminfo(self):
    	f = open("export/meminfo-" + time.strftime("%Y-%m-%d %H.%M") + ".mwh", "w")
        print ("---------------------------------------")
        print (Colors.WARNING + "Calling ADB" + Colors.ENDC)
        print ("------------")
        print ("Memory information exported to meminfo-" + time.strftime("%Y-%m-%d %H.%M") +".mwh!")
        subprocess.call(["platform-tools/adb", "shell", "dumpsys", "meminfo"], stdout=f) 
        print ("---------------------------------------")

    def call_netstats(self):
    	f = open("export/netstats-" + time.strftime("%Y-%m-%d %H.%M") + ".mwh", "w")
        print ("---------------------------------------")
        print (Colors.WARNING + "Calling ADB" + Colors.ENDC)
        print ("------------")
        print ("Network statistics exported to netstats-" + time.strftime("%Y-%m-%d %H:%M") +".mwh!")
        subprocess.call(["platform-tools/adb", "shell", "dumpsys", "netstats", "detail"], stdout=f) 
        print ("---------------------------------------")

    def call_batterystats(self):
    	f = open("export/batterystats-" + time.strftime("%Y-%m-%d %H.%M") + ".mwh", "w")
        print ("---------------------------------------")
        print (Colors.WARNING + "Calling ADB" + Colors.ENDC)
        print ("------------")
        print ("Battery statistics exported to batterystats-" + time.strftime("%Y-%m-%d %H.%M") +".mwh!")
        subprocess.call(["platform-tools/adb", "shell", "dumpsys", "batterystats", "--checkin"], stdout=f) 
        print ("---------------------------------------")

    def call_procstats(self):
    	f = open("export/procstats-" + time.strftime("%Y-%m-%d %H.%M") + ".mwh", "w")
        print ("---------------------------------------")
        print (Colors.WARNING + "Calling ADB" + Colors.ENDC)
        print ("------------")
        print ("Process information exported to procstats-" + time.strftime("%Y-%m-%d %H.%M") +".mwh!")
        subprocess.call(["platform-tools/adb", "shell", "dumpsys", "procstats", "--hours 3"], stdout=f) 
        print ("---------------------------------------")

    def full_scan(self):
        print ("Running full device scan")
        print ("About 4 minutes remaining...")
        print ("---------------------------------------")
        i = 0
        while i < 3:
            self.call_cpuinfo()
            self.call_meminfo()
            self.call_netstats()
            self.call_batterystats()
            self.call_procstats()
            i+=1
            j = 4-i
            print ("About %d minutes remaining..." % j)
            time.sleep(60)
        print ("---------------------------------------")


if __name__== "__main__":
    load_intro()
    Menu().run()
